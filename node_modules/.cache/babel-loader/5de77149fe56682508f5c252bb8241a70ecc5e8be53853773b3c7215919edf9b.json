{"ast":null,"code":"import _objectSpread from \"/Users/hacktheplanet/Documents/GitHub/blog-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport useSWR from \"swr\";\nimport { useClerkInstanceContext, useOrganizationContext, useSessionContext } from \"./contexts\";\nimport { usePagesOrInfinite, useWithSafeValues } from \"./usePagesOrInfinite\";\nvar undefinedPaginatedResource = {\n  data: void 0,\n  count: void 0,\n  isLoading: false,\n  isFetching: false,\n  isError: false,\n  page: void 0,\n  pageCount: void 0,\n  fetchPage: void 0,\n  fetchNext: void 0,\n  fetchPrevious: void 0,\n  hasNextPage: false,\n  hasPreviousPage: false\n};\nvar useOrganization = function useOrganization(params) {\n  var _ref = params || {},\n    invitationListParams = _ref.invitationList,\n    membershipListParams = _ref.membershipList,\n    domainListParams = _ref.domains,\n    membershipRequestsListParams = _ref.membershipRequests;\n  var _useOrganizationConte = useOrganizationContext(),\n    organization = _useOrganizationConte.organization,\n    lastOrganizationMember = _useOrganizationConte.lastOrganizationMember,\n    lastOrganizationInvitation = _useOrganizationConte.lastOrganizationInvitation;\n  var session = useSessionContext();\n  var domainSafeValues = useWithSafeValues(domainListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    keepPreviousData: false,\n    infinite: false,\n    enrollmentMode: void 0\n  });\n  var membershipRequestSafeValues = useWithSafeValues(membershipRequestsListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    status: \"pending\",\n    keepPreviousData: false,\n    infinite: false\n  });\n  var clerk = useClerkInstanceContext();\n  var shouldFetch = !!(clerk.loaded && session && organization);\n  var domainParams = typeof domainListParams === \"undefined\" ? void 0 : {\n    initialPage: domainSafeValues.initialPage,\n    pageSize: domainSafeValues.pageSize,\n    enrollmentMode: domainSafeValues.enrollmentMode\n  };\n  var membershipRequestParams = typeof membershipRequestsListParams === \"undefined\" ? void 0 : {\n    initialPage: membershipRequestSafeValues.initialPage,\n    pageSize: membershipRequestSafeValues.pageSize,\n    status: membershipRequestSafeValues.status\n  };\n  var domains = usePagesOrInfinite(_objectSpread({}, domainParams), organization === null || organization === void 0 ? void 0 : organization.getDomains, {\n    keepPreviousData: domainSafeValues.keepPreviousData,\n    infinite: domainSafeValues.infinite,\n    enabled: !!domainParams\n  }, {\n    type: \"domains\",\n    organizationId: organization === null || organization === void 0 ? void 0 : organization.id\n  });\n  var membershipRequests = usePagesOrInfinite(_objectSpread({}, membershipRequestParams), organization === null || organization === void 0 ? void 0 : organization.getMembershipRequests, {\n    keepPreviousData: membershipRequestSafeValues.keepPreviousData,\n    infinite: membershipRequestSafeValues.infinite,\n    enabled: !!membershipRequestParams\n  }, {\n    type: \"membershipRequests\",\n    organizationId: organization === null || organization === void 0 ? void 0 : organization.id\n  });\n  var pendingInvitations = !clerk.loaded ? function () {\n    return [];\n  } : function () {\n    var _clerk$organization;\n    return (_clerk$organization = clerk.organization) === null || _clerk$organization === void 0 ? void 0 : _clerk$organization.getPendingInvitations(invitationListParams);\n  };\n  var currentOrganizationMemberships = !clerk.loaded ? function () {\n    return [];\n  } : function () {\n    var _clerk$organization2;\n    return (_clerk$organization2 = clerk.organization) === null || _clerk$organization2 === void 0 ? void 0 : _clerk$organization2.getMemberships(membershipListParams);\n  };\n  var _useSWR = useSWR(shouldFetch && invitationListParams ? cacheKey(\"invites\", organization, lastOrganizationInvitation, invitationListParams) : null, pendingInvitations),\n    invitationList = _useSWR.data,\n    isInvitationsLoading = _useSWR.isValidating,\n    mutateInvitationList = _useSWR.mutate;\n  var _useSWR2 = useSWR(shouldFetch && membershipListParams ? cacheKey(\"memberships\", organization, lastOrganizationMember, membershipListParams) : null, currentOrganizationMemberships),\n    membershipList = _useSWR2.data,\n    isMembershipsLoading = _useSWR2.isValidating,\n    mutateMembershipList = _useSWR2.mutate;\n  if (organization === void 0) {\n    return {\n      isLoaded: false,\n      organization: void 0,\n      invitationList: void 0,\n      membershipList: void 0,\n      membership: void 0,\n      domains: undefinedPaginatedResource,\n      membershipRequests: undefinedPaginatedResource\n    };\n  }\n  if (organization === null) {\n    return {\n      isLoaded: true,\n      organization: null,\n      invitationList: null,\n      membershipList: null,\n      membership: null,\n      domains: null,\n      membershipRequests: null\n    };\n  }\n  if (!clerk.loaded && organization) {\n    return {\n      isLoaded: true,\n      organization: organization,\n      invitationList: void 0,\n      membershipList: void 0,\n      membership: void 0,\n      domains: undefinedPaginatedResource,\n      membershipRequests: undefinedPaginatedResource\n    };\n  }\n  return {\n    isLoaded: !isMembershipsLoading && !isInvitationsLoading,\n    organization: organization,\n    membershipList: membershipList,\n    membership: getCurrentOrganizationMembership(session.user.organizationMemberships, organization.id),\n    // your membership in the current org\n    invitationList: invitationList,\n    unstable__mutate: function unstable__mutate() {\n      void mutateMembershipList();\n      void mutateInvitationList();\n    },\n    domains: domains,\n    membershipRequests: membershipRequests\n  };\n};\nfunction getCurrentOrganizationMembership(organizationMemberships, activeOrganizationId) {\n  return organizationMemberships.find(function (organizationMembership) {\n    return organizationMembership.organization.id === activeOrganizationId;\n  });\n}\nfunction cacheKey(type, organization, resource, pagination) {\n  return [type, organization.id, resource === null || resource === void 0 ? void 0 : resource.id, resource === null || resource === void 0 ? void 0 : resource.updatedAt, pagination.offset, pagination.limit].filter(Boolean).join(\"-\");\n}\nexport { useOrganization };","map":{"version":3,"names":["useSWR","useClerkInstanceContext","useOrganizationContext","useSessionContext","usePagesOrInfinite","useWithSafeValues","undefinedPaginatedResource","data","count","isLoading","isFetching","isError","page","pageCount","fetchPage","fetchNext","fetchPrevious","hasNextPage","hasPreviousPage","useOrganization","params","_ref","invitationListParams","invitationList","membershipListParams","membershipList","domainListParams","domains","membershipRequestsListParams","membershipRequests","_useOrganizationConte","organization","lastOrganizationMember","lastOrganizationInvitation","session","domainSafeValues","initialPage","pageSize","keepPreviousData","infinite","enrollmentMode","membershipRequestSafeValues","status","clerk","shouldFetch","loaded","domainParams","membershipRequestParams","_objectSpread","getDomains","enabled","type","organizationId","id","getMembershipRequests","pendingInvitations","_clerk$organization","getPendingInvitations","currentOrganizationMemberships","_clerk$organization2","getMemberships","_useSWR","cacheKey","isInvitationsLoading","isValidating","mutateInvitationList","mutate","_useSWR2","isMembershipsLoading","mutateMembershipList","isLoaded","membership","getCurrentOrganizationMembership","user","organizationMemberships","unstable__mutate","activeOrganizationId","find","organizationMembership","resource","pagination","updatedAt","offset","limit","filter","Boolean","join"],"sources":["/Users/hacktheplanet/Documents/GitHub/blog-frontend/node_modules/@clerk/shared/src/hooks/useOrganization.tsx"],"sourcesContent":["import type {\n  ClerkPaginationParams,\n  GetDomainsParams,\n  GetMembershipRequestParams,\n  GetMembershipsParams,\n  GetPendingInvitationsParams,\n  OrganizationDomainResource,\n  OrganizationInvitationResource,\n  OrganizationMembershipRequestResource,\n  OrganizationMembershipResource,\n  OrganizationResource,\n} from '@clerk/types';\nimport type { ClerkPaginatedResponse } from '@clerk/types';\nimport useSWR from 'swr';\n\nimport { useClerkInstanceContext, useOrganizationContext, useSessionContext } from './contexts';\nimport type { PaginatedResources, PaginatedResourcesWithDefault } from './types';\nimport { usePagesOrInfinite, useWithSafeValues } from './usePagesOrInfinite';\n\ntype UseOrganizationParams = {\n  invitationList?: GetPendingInvitationsParams;\n  membershipList?: GetMembershipsParams;\n  domains?:\n    | true\n    | (GetDomainsParams & {\n        infinite?: boolean;\n        keepPreviousData?: boolean;\n      });\n  membershipRequests?:\n    | true\n    | (GetMembershipRequestParams & {\n        infinite?: boolean;\n        keepPreviousData?: boolean;\n      });\n};\n\ntype UseOrganizationReturn =\n  | {\n      isLoaded: false;\n      organization: undefined;\n      invitationList: undefined;\n      membershipList: undefined;\n      membership: undefined;\n      domains: PaginatedResourcesWithDefault<OrganizationDomainResource>;\n      membershipRequests: PaginatedResourcesWithDefault<OrganizationMembershipRequestResource>;\n    }\n  | {\n      isLoaded: true;\n      organization: OrganizationResource;\n      invitationList: undefined;\n      membershipList: undefined;\n      membership: undefined;\n      domains: PaginatedResourcesWithDefault<OrganizationDomainResource>;\n      membershipRequests: PaginatedResourcesWithDefault<OrganizationMembershipRequestResource>;\n    }\n  | {\n      isLoaded: boolean;\n      organization: OrganizationResource | null;\n      invitationList: OrganizationInvitationResource[] | null | undefined;\n      membershipList: OrganizationMembershipResource[] | null | undefined;\n      membership: OrganizationMembershipResource | null | undefined;\n      domains: PaginatedResources<OrganizationDomainResource> | null;\n      membershipRequests: PaginatedResources<OrganizationMembershipRequestResource> | null;\n    };\n\ntype UseOrganization = (params?: UseOrganizationParams) => UseOrganizationReturn;\n\nconst undefinedPaginatedResource = {\n  data: undefined,\n  count: undefined,\n  isLoading: false,\n  isFetching: false,\n  isError: false,\n  page: undefined,\n  pageCount: undefined,\n  fetchPage: undefined,\n  fetchNext: undefined,\n  fetchPrevious: undefined,\n  hasNextPage: false,\n  hasPreviousPage: false,\n} as const;\n\nexport const useOrganization: UseOrganization = params => {\n  const {\n    invitationList: invitationListParams,\n    membershipList: membershipListParams,\n    domains: domainListParams,\n    membershipRequests: membershipRequestsListParams,\n  } = params || {};\n  const { organization, lastOrganizationMember, lastOrganizationInvitation } = useOrganizationContext();\n  const session = useSessionContext();\n\n  const domainSafeValues = useWithSafeValues(domainListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    keepPreviousData: false,\n    infinite: false,\n    enrollmentMode: undefined,\n  });\n\n  const membershipRequestSafeValues = useWithSafeValues(membershipRequestsListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    status: 'pending',\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const clerk = useClerkInstanceContext();\n\n  const shouldFetch = !!(clerk.loaded && session && organization);\n\n  const domainParams =\n    typeof domainListParams === 'undefined'\n      ? undefined\n      : {\n          initialPage: domainSafeValues.initialPage,\n          pageSize: domainSafeValues.pageSize,\n          enrollmentMode: domainSafeValues.enrollmentMode,\n        };\n\n  const membershipRequestParams =\n    typeof membershipRequestsListParams === 'undefined'\n      ? undefined\n      : {\n          initialPage: membershipRequestSafeValues.initialPage,\n          pageSize: membershipRequestSafeValues.pageSize,\n          status: membershipRequestSafeValues.status,\n        };\n\n  const domains = usePagesOrInfinite<GetDomainsParams, ClerkPaginatedResponse<OrganizationDomainResource>>(\n    {\n      ...domainParams,\n    },\n    organization?.getDomains,\n    {\n      keepPreviousData: domainSafeValues.keepPreviousData,\n      infinite: domainSafeValues.infinite,\n      enabled: !!domainParams,\n    },\n    {\n      type: 'domains',\n      organizationId: organization?.id,\n    },\n  );\n\n  const membershipRequests = usePagesOrInfinite<\n    GetMembershipRequestParams,\n    ClerkPaginatedResponse<OrganizationMembershipRequestResource>\n  >(\n    {\n      ...membershipRequestParams,\n    },\n    organization?.getMembershipRequests,\n    {\n      keepPreviousData: membershipRequestSafeValues.keepPreviousData,\n      infinite: membershipRequestSafeValues.infinite,\n      enabled: !!membershipRequestParams,\n    },\n    {\n      type: 'membershipRequests',\n      organizationId: organization?.id,\n    },\n  );\n\n  // Some gymnastics to adhere to the rules of hooks\n  // We need to make sure useSWR is called on every render\n  const pendingInvitations = !clerk.loaded\n    ? () => [] as OrganizationInvitationResource[]\n    : () => clerk.organization?.getPendingInvitations(invitationListParams);\n\n  const currentOrganizationMemberships = !clerk.loaded\n    ? () => [] as OrganizationMembershipResource[]\n    : () => clerk.organization?.getMemberships(membershipListParams);\n\n  const {\n    data: invitationList,\n    isValidating: isInvitationsLoading,\n    mutate: mutateInvitationList,\n  } = useSWR(\n    shouldFetch && invitationListParams\n      ? cacheKey('invites', organization, lastOrganizationInvitation, invitationListParams)\n      : null,\n    pendingInvitations,\n  );\n\n  const {\n    data: membershipList,\n    isValidating: isMembershipsLoading,\n    mutate: mutateMembershipList,\n  } = useSWR(\n    shouldFetch && membershipListParams\n      ? cacheKey('memberships', organization, lastOrganizationMember, membershipListParams)\n      : null,\n    currentOrganizationMemberships,\n  );\n\n  if (organization === undefined) {\n    return {\n      isLoaded: false,\n      organization: undefined,\n      invitationList: undefined,\n      membershipList: undefined,\n      membership: undefined,\n      domains: undefinedPaginatedResource,\n      membershipRequests: undefinedPaginatedResource,\n    };\n  }\n\n  if (organization === null) {\n    return {\n      isLoaded: true,\n      organization: null,\n      invitationList: null,\n      membershipList: null,\n      membership: null,\n      domains: null,\n      membershipRequests: null,\n    };\n  }\n\n  /** In SSR context we include only the organization object when loadOrg is set to true. */\n  if (!clerk.loaded && organization) {\n    return {\n      isLoaded: true,\n      organization,\n      invitationList: undefined,\n      membershipList: undefined,\n      membership: undefined,\n      domains: undefinedPaginatedResource,\n      membershipRequests: undefinedPaginatedResource,\n    };\n  }\n\n  return {\n    isLoaded: !isMembershipsLoading && !isInvitationsLoading,\n    organization,\n    membershipList,\n    membership: getCurrentOrganizationMembership(session!.user.organizationMemberships, organization.id), // your membership in the current org\n    invitationList,\n    unstable__mutate: () => {\n      void mutateMembershipList();\n      void mutateInvitationList();\n    },\n    domains,\n    membershipRequests,\n  };\n};\n\nfunction getCurrentOrganizationMembership(\n  organizationMemberships: OrganizationMembershipResource[],\n  activeOrganizationId: string,\n) {\n  return organizationMemberships.find(\n    organizationMembership => organizationMembership.organization.id === activeOrganizationId,\n  );\n}\n\nfunction cacheKey(\n  type: 'memberships' | 'invites',\n  organization: OrganizationResource,\n  resource: OrganizationInvitationResource | OrganizationMembershipResource | null | undefined,\n  pagination: ClerkPaginationParams,\n) {\n  return [type, organization.id, resource?.id, resource?.updatedAt, pagination.offset, pagination.limit]\n    .filter(Boolean)\n    .join('-');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}