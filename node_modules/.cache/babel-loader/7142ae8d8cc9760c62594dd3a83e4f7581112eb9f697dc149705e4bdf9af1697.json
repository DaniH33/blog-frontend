{"ast":null,"code":"import { noop } from \"../noop\";\nimport pollerWorkerSource from \"./workerTimers.worker\";\nvar createWebWorker = function createWebWorker(source) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (typeof Worker === \"undefined\") {\n    return null;\n  }\n  try {\n    var blob = new Blob([source], {\n      type: \"application/javascript; charset=utf-8\"\n    });\n    var workerScript = globalThis.URL.createObjectURL(blob);\n    return new Worker(workerScript, opts);\n  } catch (e) {\n    console.warn(\"Clerk: Cannot create worker from blob. Consider adding worker-src blob:; to your CSP\");\n    return null;\n  }\n};\nvar fallbackTimers = function fallbackTimers() {\n  var setTimeout = globalThis.setTimeout.bind(globalThis);\n  var setInterval = globalThis.setInterval.bind(globalThis);\n  var clearTimeout = globalThis.clearTimeout.bind(globalThis);\n  var clearInterval = globalThis.clearInterval.bind(globalThis);\n  return {\n    setTimeout: setTimeout,\n    setInterval: setInterval,\n    clearTimeout: clearTimeout,\n    clearInterval: clearInterval,\n    cleanup: noop\n  };\n};\nvar createWorkerTimers = function createWorkerTimers() {\n  var _worker;\n  var id = 0;\n  var generateId = function generateId() {\n    return id++;\n  };\n  var callbacks = /* @__PURE__ */new Map();\n  var post = function post(w, p) {\n    return w === null || w === void 0 ? void 0 : w.postMessage(p);\n  };\n  var handleMessage = function handleMessage(e) {\n    var _callbacks$get;\n    (_callbacks$get = callbacks.get(e.data.id)) === null || _callbacks$get === void 0 ? void 0 : _callbacks$get();\n  };\n  var worker = createWebWorker(pollerWorkerSource, {\n    name: \"clerk-timers\"\n  });\n  (_worker = worker) === null || _worker === void 0 ? void 0 : _worker.addEventListener(\"message\", handleMessage);\n  if (!worker) {\n    return fallbackTimers();\n  }\n  var init = function init() {\n    if (!worker) {\n      var _worker2;\n      worker = createWebWorker(pollerWorkerSource, {\n        name: \"clerk-timers\"\n      });\n      (_worker2 = worker) === null || _worker2 === void 0 ? void 0 : _worker2.addEventListener(\"message\", handleMessage);\n    }\n  };\n  var cleanup = function cleanup() {\n    if (worker) {\n      worker.terminate();\n      worker = null;\n      callbacks.clear();\n    }\n  };\n  var setTimeout = function setTimeout(cb, ms) {\n    init();\n    var id2 = generateId();\n    callbacks.set(id2, cb);\n    post(worker, {\n      type: \"setTimeout\",\n      id: id2,\n      ms: ms\n    });\n    return id2;\n  };\n  var setInterval = function setInterval(cb, ms) {\n    init();\n    var id2 = generateId();\n    callbacks.set(id2, cb);\n    post(worker, {\n      type: \"setInterval\",\n      id: id2,\n      ms: ms\n    });\n    return id2;\n  };\n  var clearTimeout = function clearTimeout(id2) {\n    init();\n    callbacks.delete(id2);\n    post(worker, {\n      type: \"clearTimeout\",\n      id: id2\n    });\n  };\n  var clearInterval = function clearInterval(id2) {\n    init();\n    callbacks.delete(id2);\n    post(worker, {\n      type: \"clearInterval\",\n      id: id2\n    });\n  };\n  return {\n    setTimeout: setTimeout,\n    setInterval: setInterval,\n    clearTimeout: clearTimeout,\n    clearInterval: clearInterval,\n    cleanup: cleanup\n  };\n};\nexport { createWorkerTimers };","map":{"version":3,"names":["noop","pollerWorkerSource","createWebWorker","source","opts","arguments","length","undefined","Worker","blob","Blob","type","workerScript","globalThis","URL","createObjectURL","e","console","warn","fallbackTimers","setTimeout","bind","setInterval","clearTimeout","clearInterval","cleanup","createWorkerTimers","_worker","id","generateId","callbacks","Map","post","w","p","postMessage","handleMessage","_callbacks$get","get","data","worker","name","addEventListener","init","_worker2","terminate","clear","cb","ms","id2","set","delete"],"sources":["/Users/hacktheplanet/Documents/GitHub/blog-frontend/node_modules/@clerk/shared/src/utils/workerTimers/createWorkerTimers.ts"],"sourcesContent":["import { noop } from '../noop';\nimport type {\n  WorkerClearTimeout,\n  WorkerSetTimeout,\n  WorkerTimeoutCallback,\n  WorkerTimerEvent,\n  WorkerTimerId,\n  WorkerTimerResponseEvent,\n} from './workerTimers.types';\n// @ts-ignore\nimport pollerWorkerSource from './workerTimers.worker';\n\nconst createWebWorker = (source: string, opts: ConstructorParameters<typeof Worker>[1] = {}): Worker | null => {\n  if (typeof Worker === 'undefined') {\n    return null;\n  }\n\n  try {\n    const blob = new Blob([source], { type: 'application/javascript; charset=utf-8' });\n    const workerScript = globalThis.URL.createObjectURL(blob);\n    return new Worker(workerScript, opts);\n  } catch (e) {\n    console.warn('Clerk: Cannot create worker from blob. Consider adding worker-src blob:; to your CSP');\n    return null;\n  }\n};\n\nconst fallbackTimers = () => {\n  const setTimeout = globalThis.setTimeout.bind(globalThis) as WorkerSetTimeout;\n  const setInterval = globalThis.setInterval.bind(globalThis) as WorkerSetTimeout;\n  const clearTimeout = globalThis.clearTimeout.bind(globalThis) as WorkerClearTimeout;\n  const clearInterval = globalThis.clearInterval.bind(globalThis) as WorkerClearTimeout;\n  return { setTimeout, setInterval, clearTimeout, clearInterval, cleanup: noop };\n};\n\nexport const createWorkerTimers = () => {\n  let id = 0;\n  const generateId = () => id++;\n  const callbacks = new Map<WorkerTimerId, WorkerTimeoutCallback>();\n  const post = (w: Worker | null, p: WorkerTimerEvent) => w?.postMessage(p);\n  const handleMessage = (e: MessageEvent<WorkerTimerResponseEvent>) => {\n    callbacks.get(e.data.id)?.();\n  };\n\n  let worker = createWebWorker(pollerWorkerSource, { name: 'clerk-timers' });\n  worker?.addEventListener('message', handleMessage);\n\n  if (!worker) {\n    return fallbackTimers();\n  }\n\n  const init = () => {\n    if (!worker) {\n      worker = createWebWorker(pollerWorkerSource, { name: 'clerk-timers' });\n      worker?.addEventListener('message', handleMessage);\n    }\n  };\n\n  const cleanup = () => {\n    if (worker) {\n      worker.terminate();\n      worker = null;\n      callbacks.clear();\n    }\n  };\n\n  const setTimeout: WorkerSetTimeout = (cb, ms) => {\n    init();\n    const id = generateId();\n    callbacks.set(id, cb);\n    post(worker, { type: 'setTimeout', id, ms });\n    return id;\n  };\n\n  const setInterval: WorkerSetTimeout = (cb, ms) => {\n    init();\n    const id = generateId();\n    callbacks.set(id, cb);\n    post(worker, { type: 'setInterval', id, ms });\n    return id;\n  };\n\n  const clearTimeout: WorkerClearTimeout = id => {\n    init();\n    callbacks.delete(id);\n    post(worker, { type: 'clearTimeout', id });\n  };\n\n  const clearInterval: WorkerClearTimeout = id => {\n    init();\n    callbacks.delete(id);\n    post(worker, { type: 'clearInterval', id });\n  };\n\n  return { setTimeout, setInterval, clearTimeout, clearInterval, cleanup };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}