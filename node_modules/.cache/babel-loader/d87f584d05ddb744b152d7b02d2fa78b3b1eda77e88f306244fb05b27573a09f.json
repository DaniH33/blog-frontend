{"ast":null,"code":"var IS_HEX_COLOR_REGEX = /^#?([A-F0-9]{6}|[A-F0-9]{3})$/i;\nvar IS_RGB_COLOR_REGEX = /^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/i;\nvar IS_RGBA_COLOR_REGEX = /^rgba\\((\\d+),\\s*(\\d+),\\s*(\\d+)(,\\s*\\d+(\\.\\d+)?)\\)$/i;\nvar IS_HSL_COLOR_REGEX = /^hsl\\((\\d+),\\s*([\\d.]+)%,\\s*([\\d.]+)%\\)$/i;\nvar IS_HSLA_COLOR_REGEX = /^hsla\\((\\d+),\\s*([\\d.]+)%,\\s*([\\d.]+)%(,\\s*\\d+(\\.\\d+)?)*\\)$/i;\nvar isValidHexString = function isValidHexString(s) {\n  return !!s.match(IS_HEX_COLOR_REGEX);\n};\nvar isValidRgbaString = function isValidRgbaString(s) {\n  return !!(s.match(IS_RGB_COLOR_REGEX) || s.match(IS_RGBA_COLOR_REGEX));\n};\nvar isValidHslaString = function isValidHslaString(s) {\n  return !!s.match(IS_HSL_COLOR_REGEX) || !!s.match(IS_HSLA_COLOR_REGEX);\n};\nvar isRGBColor = function isRGBColor(c) {\n  return typeof c !== \"string\" && \"r\" in c;\n};\nvar isHSLColor = function isHSLColor(c) {\n  return typeof c !== \"string\" && \"h\" in c;\n};\nvar isTransparent = function isTransparent(c) {\n  return c === \"transparent\";\n};\nvar hasAlpha = function hasAlpha(color) {\n  return typeof color !== \"string\" && color.a != void 0 && color.a < 1;\n};\nexport { hasAlpha, isHSLColor, isRGBColor, isTransparent, isValidHexString, isValidHslaString, isValidRgbaString };","map":{"version":3,"names":["IS_HEX_COLOR_REGEX","IS_RGB_COLOR_REGEX","IS_RGBA_COLOR_REGEX","IS_HSL_COLOR_REGEX","IS_HSLA_COLOR_REGEX","isValidHexString","s","match","isValidRgbaString","isValidHslaString","isRGBColor","c","isHSLColor","isTransparent","hasAlpha","color","a"],"sources":["/Users/hacktheplanet/Documents/GitHub/blog-frontend/node_modules/@clerk/shared/src/utils/color/predicates.ts"],"sourcesContent":["import type { Color, HslaColor, RgbaColor, TransparentColor } from '@clerk/types';\n\nconst IS_HEX_COLOR_REGEX = /^#?([A-F0-9]{6}|[A-F0-9]{3})$/i;\n\nconst IS_RGB_COLOR_REGEX = /^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/i;\nconst IS_RGBA_COLOR_REGEX = /^rgba\\((\\d+),\\s*(\\d+),\\s*(\\d+)(,\\s*\\d+(\\.\\d+)?)\\)$/i;\n\nconst IS_HSL_COLOR_REGEX = /^hsl\\((\\d+),\\s*([\\d.]+)%,\\s*([\\d.]+)%\\)$/i;\nconst IS_HSLA_COLOR_REGEX = /^hsla\\((\\d+),\\s*([\\d.]+)%,\\s*([\\d.]+)%(,\\s*\\d+(\\.\\d+)?)*\\)$/i;\n\nexport const isValidHexString = (s: string) => {\n  return !!s.match(IS_HEX_COLOR_REGEX);\n};\n\nexport const isValidRgbaString = (s: string) => {\n  return !!(s.match(IS_RGB_COLOR_REGEX) || s.match(IS_RGBA_COLOR_REGEX));\n};\n\nexport const isValidHslaString = (s: string) => {\n  return !!s.match(IS_HSL_COLOR_REGEX) || !!s.match(IS_HSLA_COLOR_REGEX);\n};\n\nexport const isRGBColor = (c: Color): c is RgbaColor => {\n  return typeof c !== 'string' && 'r' in c;\n};\n\nexport const isHSLColor = (c: Color): c is HslaColor => {\n  return typeof c !== 'string' && 'h' in c;\n};\n\nexport const isTransparent = (c: Color): c is TransparentColor => {\n  return c === 'transparent';\n};\n\nexport const hasAlpha = (color: Color): boolean => {\n  return typeof color !== 'string' && color.a != undefined && color.a < 1;\n};\n"],"mappings":"AAEA,IAAMA,kBAAA,GAAqB;AAE3B,IAAMC,kBAAA,GAAqB;AAC3B,IAAMC,mBAAA,GAAsB;AAE5B,IAAMC,kBAAA,GAAqB;AAC3B,IAAMC,mBAAA,GAAsB;AAErB,IAAMC,gBAAA,GAAmB,SAAnBA,iBAAoBC,CAAA,EAAc;EAC7C,OAAO,CAAC,CAACA,CAAA,CAAEC,KAAA,CAAMP,kBAAkB;AACrC;AAEO,IAAMQ,iBAAA,GAAoB,SAApBA,kBAAqBF,CAAA,EAAc;EAC9C,OAAO,CAAC,EAAEA,CAAA,CAAEC,KAAA,CAAMN,kBAAkB,KAAKK,CAAA,CAAEC,KAAA,CAAML,mBAAmB;AACtE;AAEO,IAAMO,iBAAA,GAAoB,SAApBA,kBAAqBH,CAAA,EAAc;EAC9C,OAAO,CAAC,CAACA,CAAA,CAAEC,KAAA,CAAMJ,kBAAkB,KAAK,CAAC,CAACG,CAAA,CAAEC,KAAA,CAAMH,mBAAmB;AACvE;AAEO,IAAMM,UAAA,GAAa,SAAbA,WAAcC,CAAA,EAA6B;EACtD,OAAO,OAAOA,CAAA,KAAM,YAAY,OAAOA,CAAA;AACzC;AAEO,IAAMC,UAAA,GAAa,SAAbA,WAAcD,CAAA,EAA6B;EACtD,OAAO,OAAOA,CAAA,KAAM,YAAY,OAAOA,CAAA;AACzC;AAEO,IAAME,aAAA,GAAgB,SAAhBA,cAAiBF,CAAA,EAAoC;EAChE,OAAOA,CAAA,KAAM;AACf;AAEO,IAAMG,QAAA,GAAW,SAAXA,SAAYC,KAAA,EAA0B;EACjD,OAAO,OAAOA,KAAA,KAAU,YAAYA,KAAA,CAAMC,CAAA,IAAK,UAAaD,KAAA,CAAMC,CAAA,GAAI;AACxE"},"metadata":{},"sourceType":"module","externalDependencies":[]}