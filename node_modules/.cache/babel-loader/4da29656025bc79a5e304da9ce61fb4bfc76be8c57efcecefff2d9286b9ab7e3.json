{"ast":null,"code":"import React from \"react\";\nfunction assertContextExists(contextVal, msgOrCtx) {\n  if (!contextVal) {\n    throw typeof msgOrCtx === \"string\" ? new Error(msgOrCtx) : new Error(\"\".concat(msgOrCtx.displayName, \" not found\"));\n  }\n}\nvar createContextAndHook = function createContextAndHook(displayName, options) {\n  var _ref = options || {},\n    _ref$assertCtxFn = _ref.assertCtxFn,\n    assertCtxFn = _ref$assertCtxFn === void 0 ? assertContextExists : _ref$assertCtxFn;\n  var Ctx = React.createContext(void 0);\n  Ctx.displayName = displayName;\n  var useCtx = function useCtx() {\n    var ctx = React.useContext(Ctx);\n    assertCtxFn(ctx, \"\".concat(displayName, \" not found\"));\n    return ctx.value;\n  };\n  var useCtxWithoutGuarantee = function useCtxWithoutGuarantee() {\n    var ctx = React.useContext(Ctx);\n    return ctx ? ctx.value : {};\n  };\n  return [Ctx, useCtx, useCtxWithoutGuarantee];\n};\nexport { assertContextExists, createContextAndHook };","map":{"version":3,"names":["React","assertContextExists","contextVal","msgOrCtx","Error","concat","displayName","createContextAndHook","options","_ref","_ref$assertCtxFn","assertCtxFn","Ctx","createContext","useCtx","ctx","useContext","value","useCtxWithoutGuarantee"],"sources":["/Users/hacktheplanet/Documents/GitHub/blog-frontend/node_modules/@clerk/shared/src/hooks/createContextAndHook.ts"],"sourcesContent":["import React from 'react';\n\nexport function assertContextExists(contextVal: unknown, msgOrCtx: string | React.Context<any>): asserts contextVal {\n  if (!contextVal) {\n    throw typeof msgOrCtx === 'string' ? new Error(msgOrCtx) : new Error(`${msgOrCtx.displayName} not found`);\n  }\n}\n\ntype Options = { assertCtxFn?: (v: unknown, msg: string) => void };\ntype ContextOf<T> = React.Context<{ value: T } | undefined>;\ntype UseCtxFn<T> = () => T;\n\n/**\n * Creates and returns a Context and two hooks that return the context value.\n * The Context type is derived from the type passed in by the user.\n * The first hook returned guarantees that the context exists so the returned value is always CtxValue\n * The second hook makes no guarantees, so the returned value can be CtxValue | undefined\n */\nexport const createContextAndHook = <CtxVal>(\n  displayName: string,\n  options?: Options,\n): [ContextOf<CtxVal>, UseCtxFn<CtxVal>, UseCtxFn<CtxVal | Partial<CtxVal>>] => {\n  const { assertCtxFn = assertContextExists } = options || {};\n  const Ctx = React.createContext<{ value: CtxVal } | undefined>(undefined);\n  Ctx.displayName = displayName;\n\n  const useCtx = () => {\n    const ctx = React.useContext(Ctx);\n    assertCtxFn(ctx, `${displayName} not found`);\n    return (ctx as any).value as CtxVal;\n  };\n\n  const useCtxWithoutGuarantee = () => {\n    const ctx = React.useContext(Ctx);\n    return ctx ? ctx.value : {};\n  };\n\n  return [Ctx, useCtx, useCtxWithoutGuarantee];\n};\n"],"mappings":"AAAA,OAAOA,KAAA,MAAW;AAEX,SAASC,oBAAoBC,UAAA,EAAqBC,QAAA,EAA2D;EAClH,IAAI,CAACD,UAAA,EAAY;IACf,MAAM,OAAOC,QAAA,KAAa,WAAW,IAAIC,KAAA,CAAMD,QAAQ,IAAI,IAAIC,KAAA,IAAAC,MAAA,CAASF,QAAA,CAASG,WAAA,eAAuB;EAC1G;AACF;AAYO,IAAMC,oBAAA,GAAuB,SAAvBA,qBACXD,WAAA,EACAE,OAAA,EAC8E;EAC9E,IAAAC,IAAA,GAA8CD,OAAA,IAAW,CAAC;IAAAE,gBAAA,GAAAD,IAAA,CAAlDE,WAAA;IAAAA,WAAA,GAAAD,gBAAA,cAAcT,mBAAA,GAAAS,gBAAA;EACtB,IAAME,GAAA,GAAMZ,KAAA,CAAMa,aAAA,CAA6C,MAAS;EACxED,GAAA,CAAIN,WAAA,GAAcA,WAAA;EAElB,IAAMQ,MAAA,GAAS,SAATA,OAAA,EAAe;IACnB,IAAMC,GAAA,GAAMf,KAAA,CAAMgB,UAAA,CAAWJ,GAAG;IAChCD,WAAA,CAAYI,GAAA,KAAAV,MAAA,CAAQC,WAAA,eAAuB;IAC3C,OAAQS,GAAA,CAAYE,KAAA;EACtB;EAEA,IAAMC,sBAAA,GAAyB,SAAzBA,uBAAA,EAA+B;IACnC,IAAMH,GAAA,GAAMf,KAAA,CAAMgB,UAAA,CAAWJ,GAAG;IAChC,OAAOG,GAAA,GAAMA,GAAA,CAAIE,KAAA,GAAQ,CAAC;EAC5B;EAEA,OAAO,CAACL,GAAA,EAAKE,MAAA,EAAQI,sBAAsB;AAC7C"},"metadata":{},"sourceType":"module","externalDependencies":[]}