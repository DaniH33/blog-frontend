{"ast":null,"code":"import _objectSpread from \"/Users/hacktheplanet/Documents/GitHub/blog-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { camelToSnake, snakeToCamel } from \"./string\";\nvar createDeepObjectTransformer = function createDeepObjectTransformer(transform) {\n  var deepTransform = function deepTransform(obj) {\n    if (!obj) {\n      return obj;\n    }\n    if (Array.isArray(obj)) {\n      return obj.map(function (el) {\n        if (typeof el === \"object\" || Array.isArray(el)) {\n          return deepTransform(el);\n        }\n        return el;\n      });\n    }\n    var copy = _objectSpread({}, obj);\n    var keys = Object.keys(copy);\n    for (var _i = 0, _keys = keys; _i < _keys.length; _i++) {\n      var oldName = _keys[_i];\n      var newName = transform(oldName.toString());\n      if (newName !== oldName) {\n        copy[newName] = copy[oldName];\n        delete copy[oldName];\n      }\n      if (typeof copy[newName] === \"object\") {\n        copy[newName] = deepTransform(copy[newName]);\n      }\n    }\n    return copy;\n  };\n  return deepTransform;\n};\nvar deepCamelToSnake = createDeepObjectTransformer(camelToSnake);\nvar deepSnakeToCamel = createDeepObjectTransformer(snakeToCamel);\nexport { deepCamelToSnake, deepSnakeToCamel };","map":{"version":3,"names":["camelToSnake","snakeToCamel","createDeepObjectTransformer","transform","deepTransform","obj","Array","isArray","map","el","copy","_objectSpread","keys","Object","_i","_keys","length","oldName","newName","toString","deepCamelToSnake","deepSnakeToCamel"],"sources":["/Users/hacktheplanet/Documents/GitHub/blog-frontend/node_modules/@clerk/shared/src/utils/object.ts"],"sourcesContent":["import { camelToSnake, snakeToCamel } from './string';\n\nconst createDeepObjectTransformer = (transform: any) => {\n  const deepTransform = (obj: any): any => {\n    if (!obj) {\n      return obj;\n    }\n\n    if (Array.isArray(obj)) {\n      return obj.map(el => {\n        if (typeof el === 'object' || Array.isArray(el)) {\n          return deepTransform(el);\n        }\n        return el;\n      });\n    }\n\n    const copy = { ...obj };\n    const keys = Object.keys(copy);\n    for (const oldName of keys) {\n      const newName = transform(oldName.toString());\n      if (newName !== oldName) {\n        copy[newName] = copy[oldName];\n        delete copy[oldName];\n      }\n      if (typeof copy[newName] === 'object') {\n        copy[newName] = deepTransform(copy[newName]);\n      }\n    }\n    return copy;\n  };\n\n  return deepTransform;\n};\n\n/**\n * Transforms camelCased objects/ arrays to snake_cased.\n * This function recursively traverses all objects and arrays of the passed value\n * camelCased keys are removed.\n */\nexport const deepCamelToSnake = createDeepObjectTransformer(camelToSnake);\n\n/**\n * Transforms snake_cased objects/ arrays to camelCased.\n * This function recursively traverses all objects and arrays of the passed value\n * camelCased keys are removed.\n */\nexport const deepSnakeToCamel = createDeepObjectTransformer(snakeToCamel);\n"],"mappings":";AAAA,SAASA,YAAA,EAAcC,YAAA,QAAoB;AAE3C,IAAMC,2BAAA,GAA8B,SAA9BA,4BAA+BC,SAAA,EAAmB;EACtD,IAAMC,aAAA,GAAgB,SAAhBA,cAAiBC,GAAA,EAAkB;IACvC,IAAI,CAACA,GAAA,EAAK;MACR,OAAOA,GAAA;IACT;IAEA,IAAIC,KAAA,CAAMC,OAAA,CAAQF,GAAG,GAAG;MACtB,OAAOA,GAAA,CAAIG,GAAA,CAAI,UAAAC,EAAA,EAAM;QACnB,IAAI,OAAOA,EAAA,KAAO,YAAYH,KAAA,CAAMC,OAAA,CAAQE,EAAE,GAAG;UAC/C,OAAOL,aAAA,CAAcK,EAAE;QACzB;QACA,OAAOA,EAAA;MACT,CAAC;IACH;IAEA,IAAMC,IAAA,GAAAC,aAAA,KAAYN,GAAA,CAAI;IACtB,IAAMO,IAAA,GAAOC,MAAA,CAAOD,IAAA,CAAKF,IAAI;IAC7B,SAAAI,EAAA,MAAAC,KAAA,GAAsBH,IAAA,EAAAE,EAAA,GAAAC,KAAA,CAAAC,MAAA,EAAAF,EAAA,IAAM;MAA5B,IAAWG,OAAA,GAAAF,KAAA,CAAAD,EAAA;MACT,IAAMI,OAAA,GAAUf,SAAA,CAAUc,OAAA,CAAQE,QAAA,CAAS,CAAC;MAC5C,IAAID,OAAA,KAAYD,OAAA,EAAS;QACvBP,IAAA,CAAKQ,OAAO,IAAIR,IAAA,CAAKO,OAAO;QAC5B,OAAOP,IAAA,CAAKO,OAAO;MACrB;MACA,IAAI,OAAOP,IAAA,CAAKQ,OAAO,MAAM,UAAU;QACrCR,IAAA,CAAKQ,OAAO,IAAId,aAAA,CAAcM,IAAA,CAAKQ,OAAO,CAAC;MAC7C;IACF;IACA,OAAOR,IAAA;EACT;EAEA,OAAON,aAAA;AACT;AAOO,IAAMgB,gBAAA,GAAmBlB,2BAAA,CAA4BF,YAAY;AAOjE,IAAMqB,gBAAA,GAAmBnB,2BAAA,CAA4BD,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}